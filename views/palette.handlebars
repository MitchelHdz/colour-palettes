<div id="palette-container">
  {{#if new}}
    <h1 class="zoom-in"><a href="/">Here Are Your Colours</a></h1>
  {{else}}
    <h1 class="zoom-in">Colour Palette</h1>
  {{/if}}
  <ul>
    {{#each hexColours}}
      <li>
        <svg width="100" height="100" viewBox="0 0 100 100">
          <defs>
            <filter id="f1" x="-50%" y="-50%" width="200%" height="200%">
              <feOffset result="offOut" in="SourceAlpha" dx="0" dy="2"/>
              <feGaussianBlur result="blurOut" in="offOut" stdDeviation="2"/>
              <feBlend in="SourceGraphic" in2="blurOut" mode="normal"/>
            </filter>
          </defs>
          <circle class="swatch" r="50" cx="50%" cy="50%" style="fill:#{{this}};"></circle>
          <circle class="circle-shadow" r="50" cx="50%" cy="50%" fill="black" filter="url(#f1)"></circle>
          <text class="colour-label" x="50%" y="55%" text-anchor="middle" fill="#f8f8ff">#{{this}}</text>
        </svg>
      </li>
    {{/each}}
  </ul>
  <div class="fade-in" id="back-container">
    {{#if new}}
      <a href="/">Make a new one</a> üé®
      <br>
    {{else}}
      <a href="/">Make a colour palette</a> üé®
      <br>
    {{/if}}

    <a id="tweet-palette-link">Tweet this palette</a> üê¶
  </div>

  <script>
  // POP POP POP...
  (function(){
    Array.from(document.getElementsByTagName('svg')).forEach(function(item, index) {
      setTimeout(function () {
        item.classList.add('visible');
      }, 100 * index);
    });
  })();
  </script>

  <p class="fade-in">
    This tool uses <mark><a href="https://en.wikipedia.org/wiki/K-means_clustering" class="small">k-means clustering</a></mark> to produce a colour palette from an input image. K-means clustering is a method of vector quantization, originally from signal processing, that is popular for cluster analysis in data mining. k-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster.
    Given an initial set of k means ('centroids'), the algorithm proceeds by alternating between two steps:
    <br><br>Assignment step: Assign each observation to the cluster whose mean has the least squared Euclidean distance; this is intuitively the "nearest" mean.
    <br><br>Update step: Calculate the new means to be the centroids of the observations in the new clusters.
    <br><br>The algorithm has converged when the assignments no longer change. There is no guarantee that the global optimum is found using this algorithm.
  </p>
</div>
<script src="../tweetLink.js"></script>
